name: ImmortalWrt-Build-CMCC-RAX3000M

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每日构建

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  TARGET_DEVICE: cmcc_rax3000m
  TIMEZONE: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180  # 3小时

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        path: scripts
        fetch-depth: 0

    - name: Determine Build Branch
      id: get_branch
      run: |
        DEFAULT_BRANCH=$(git ls-remote --symref "$REPO_URL" HEAD | awk -F'[ \t/]+' '/^ref:/ {print $3}')
        if [ -z "$DEFAULT_BRANCH" ]; then
          DEFAULT_BRANCH="master"
        fi
        echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
        echo "REPO_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

    - name: Prepare Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get full-upgrade -y
        
        # 安装必要的构建工具
        sudo apt-get install -y build-essential clang flex bison ninja-build \
        gcc-multilib g++-multilib autoconf automake ccache cmake curl dpkg-dev \
        libelf-dev libffi-dev libfl-dev libssl-dev libtool make patchelf pkg-config \
        python3 python3-pip python3-setuptools python3-venv zlib1g-dev git rsync
        
        # 安装特定依赖
        sudo apt-get install -y subversion gperf gettext texinfo help2man ncurses-dev \
        libreadline-dev libjpeg-dev libgmp3-dev libmpc-dev libxml2-dev u-boot-tools
        
        # 初始化 Python 环境
        python3 -m pip install --upgrade pip
        pip3 install wheel

    - name: Clone Source Code
      run: |
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt --depth=1
        cd openwrt
        git fetch --unshallow --tags
        echo "Source Version: $(git describe --tags || git rev-parse --short HEAD)" >> ../version.info

    - name: Apply Custom Configuration
      run: |
        cd openwrt
        
        # 如果存在 diy-part1.sh，则应用
        if [ -f "../scripts/diy-part1.sh" ]; then
          chmod +x "../scripts/diy-part1.sh"
          ../scripts/diy-part1.sh
        else
          echo "::warning::diy-part1.sh not found"
        fi

        # 更新并安装 feeds，支持重试
        for i in {1..3}; do
          ./scripts/feeds update -a && break || sleep $((i*30))
        done
        ./scripts/feeds install -a --force

        # 使用 RAX3000M 的特定配置
        if [ -f "../scripts/.config" ]; then
          cp "../scripts/.config" .
        else
          cp -f defconfig/mt7981-ax3000.config .config
          echo "::notice::Using default config for RAX3000M"
        fi

        # 如果存在 diy-part2.sh，则应用
        if [ -f "../scripts/diy-part2.sh" ]; then
          chmod +x "../scripts/diy-part2.sh"
          ../scripts/diy-part2.sh
        fi
        
        # 禁用不支持的软件包
        sed -i 's/CONFIG_PACKAGE_usbgadget=y/CONFIG_PACKAGE_usbgadget=n/g' .config
        sed -i 's/CONFIG_PACKAGE_dae=y/CONFIG_PACKAGE_dae=n/g' .config
        sed -i 's/CONFIG_PACKAGE_daed=y/CONFIG_PACKAGE_daed=n/g' .config
        make oldconfig

    - name: Verify Configuration
      run: |
        cd openwrt
        cat .config

    - name: Configure Caching
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl
          openwrt/ccache
          openwrt/staging_dir
        key: ${{ runner.os }}-${{ hashFiles('openwrt/.config', 'openwrt/feeds.conf.default') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ hashFiles('openwrt/.config', 'openwrt/feeds.conf.default') }}-

    - name: Download Dependencies
      run: |
        cd openwrt
        make -j$(nproc) download || make -j1 download
        
        # 清理无效文件
        find dl -type f -size -2k -name "*.zip" -exec rm -fv {} \;
        find dl -type f -size -2k -name "*.gz" -exec rm -fv {} \;

    - name: Build Firmware
      run: |
        cd openwrt
        ulimit -n 5120
        export CCACHE_DIR="$PWD/ccache"
        export CCACHE_BASEDIR="$PWD"
        
        # 动态线程管理
        MAX_JOBS=$(($(nproc) * 2))
        make -j$MAX_JOBS || make -j2 || make -j1 V=s
        
        # 生成 sha256 校验和
        cd bin/targets/*/*
        sha256sum -b *.bin > sha256sum.txt

    - name: Archive Build Artifacts
      run: |
        cd openwrt/bin/targets/*/*
        FIRMWARE_DIR=$(pwd)
        echo "FIRMWARE_DIR=$FIRMWARE_DIR" >> $GITHUB_ENV
        
        # 创建构建信息
        echo "Device: $TARGET_DEVICE" > build-info.md
        echo "Build Time: $(date +"%Y-%m-%d %H:%M:%S %Z")" >> build-info.md
        echo "Branch: $REPO_BRANCH" >> build-info.md
        echo "Git Commit: $(git -C ../../../../ rev-parse --short HEAD)" >> build-info.md
        echo "Build System: Ubuntu 22.04" >> build-info.md
        echo "Toolchain: $(gcc --version | head -n1)" >> build-info.md

    - name: Release Firmware
      uses: softprops/action-gh-release@v2
      with:
        tag_name: nightly-${{ env.TARGET_DEVICE }}-$(date +%Y%m%d)
        name: "${{ env.TARGET_DEVICE }} Daily Build"
        body_path: build-info.md
        files: |
          ${{ env.FIRMWARE_DIR }}/*.bin
          ${{ env.FIRMWARE_DIR }}/*.img
          ${{ env.FIRMWARE_DIR }}/sha256sum.txt
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup Workspace
      if: always()
      run: |
        df -h
        sudo rm -rf openwrt/{build_dir,staging_dir,tmp}
        sudo rm -rf /usr/local/share/boost /usr/share/swig*
        sudo apt-get clean
