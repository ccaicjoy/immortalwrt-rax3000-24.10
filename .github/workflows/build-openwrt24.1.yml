name: ImmortalWrt-Build-CMCC-RAX3000M

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每日自动构建

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  TARGET_DEVICE: cmcc_rax3000m
  TIMEZONE: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180  # 3小时超时

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        path: scripts
        fetch-depth: 0

    - name: 确定构建分支
      id: get_branch
      run: |
        DEFAULT_BRANCH=$(git ls-remote --symref "$REPO_URL" HEAD | awk -F'[ \t/]+' '/^ref:/ {print $3}')
        if [ -z "$DEFAULT_BRANCH" ]; then
          DEFAULT_BRANCH="master"
        fi
        echo "branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
        echo "REPO_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV

    - name: 准备编译环境
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get full-upgrade -y
        
        # 基础编译工具
        sudo apt-get install -y build-essential clang flex bison ninja-build \
        gcc-multilib g++-multilib autoconf automake ccache cmake curl dpkg-dev \
        libelf-dev libffi-dev libfl-dev libssl-dev libtool make patchelf pkg-config \
        python3 python3-pip python3-setuptools python3-venv zlib1g-dev git rsync
        
        # 特殊依赖
        sudo apt-get install -y subversion gperf gettext texinfo help2man ncurses-dev \
        libreadline-dev libjpeg-dev libgmp3-dev libmpc-dev libxml2-dev u-boot-tools
        
        # 初始化Python环境
        python3 -m pip install --upgrade pip
        pip3 install wheel

    - name: 克隆源码
      run: |
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt --depth=1
        cd openwrt
        git fetch --unshallow --tags
        echo "源码版本: $(git describe --tags || git rev-parse --short HEAD)" >> ../version.info

    - name: 应用自定义配置
      run: |
        cd openwrt
        
        # 第一部分自定义脚本
        if [ -f "../scripts/diy-part1.sh" ]; then
          chmod +x "../scripts/diy-part1.sh"
          ../scripts/diy-part1.sh
        else
          echo "::warning::未找到 diy-part1.sh 脚本"
        fi

        # 更新Feeds并重试机制
        for i in {1..3}; do
          ./scripts/feeds update -a && break || sleep $((i*30))
        done
        ./scripts/feeds install -a --force

        # 应用配置文件
        if [ -f "../scripts/.config" ]; then
          cp "../scripts/.config" .
        else
          cp defconfig/cp -f defconfig/mt7981-ax3000.config .config
          echo "::notice::使用默认配置文件"
        fi

        # 第二部分自定义脚本
        if [ -f "../scripts/diy-part2.sh" ]; then
          chmod +x "../scripts/diy-part2.sh"
          ../scripts/diy-part2.sh
        fi
        
        make defconfig
        make oldconfig

    - name: 配置缓存
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl
          openwrt/ccache
          openwrt/staging_dir
        key: ${{ runner.os }}-${{ hashFiles('openwrt/.config', 'openwrt/feeds.conf.default') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-${{ hashFiles('openwrt/.config', 'openwrt/feeds.conf.default') }}-

    - name: 下载依赖
      run: |
        cd openwrt
        make -j$(nproc) download || make -j1 download
        
        # 清理无效文件
        find dl -type f -size -2k -name "*.zip" -exec rm -fv {} \;
        find dl -type f -size -2k -name "*.gz" -exec rm -fv {} \;

    - name: 编译固件
      run: |
        cd openwrt
        ulimit -n 5120
        export CCACHE_DIR="$PWD/ccache"
        export CCACHE_BASEDIR="$PWD"
        
        # 动态线程管理
        MAX_JOBS=$(($(nproc) * 2))
        make -j$MAX_JOBS || make -j2 || make -j1 V=s
        
        # 生成sha256校验
        cd bin/targets/*/*
        sha256sum -b *.bin > sha256sum.txt

    - name: 归档构建成果
      run: |
        cd openwrt/bin/targets/*/*
        FIRMWARE_DIR=$(pwd)
        echo "FIRMWARE_DIR=$FIRMWARE_DIR" >> $GITHUB_ENV
        
        # 创建构建信息
        echo "设备型号: $TARGET_DEVICE" > build-info.md
        echo "构建时间: $(date +"%Y-%m-%d %H:%M:%S %Z")" >> build-info.md
        echo "源码分支: $REPO_BRANCH" >> build-info.md
        echo "Git Commit: $(git -C ../../../../ rev-parse --short HEAD)" >> build-info.md
        echo "构建系统: Ubuntu 22.04" >> build-info.md
        echo "编译工具链: $(gcc --version | head -n1)" >> build-info.md

    - name: 发布固件
      uses: softprops/action-gh-release@v2
      with:
        tag_name: nightly-${{ env.TARGET_DEVICE }}-$(date +%Y%m%d)
        name: "${{ env.TARGET_DEVICE }} 每日构建"
        body_path: build-info.md
        files: |
          ${{ env.FIRMWARE_DIR }}/*.bin
          ${{ env.FIRMWARE_DIR }}/*.img
          ${{ env.FIRMWARE_DIR }}/sha256sum.txt
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理工作空间
      if: always()
      run: |
        df -h
        sudo rm -rf openwrt/{build_dir,staging_dir,tmp}
        sudo rm -rf /usr/local/share/boost /usr/share/swig*
        sudo apt-get clean
