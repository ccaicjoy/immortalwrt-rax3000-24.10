name: build-openwrt24.10

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120  # 增加超时时间

    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整提交历史

    - name: 初始化环境
      run: |
        sudo apt update -y
        sudo apt install -y software-properties-common
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt full-upgrade -y
        sudo apt install -y build-essential clang flex bison ninja-build \
        ...（保持原有依赖）...
        # 补充常见缺失依赖
        python3-setuptools python3-venv libxml2-dev libjpeg-dev zlib1g-dev

    - name: 获取默认分支
      id: get_branch
      run: |
        # 使用更可靠的获取方式
        DEFAULT_BRANCH=$(git ls-remote --symref "$REPO_URL" HEAD | awk '/^ref:/ {sub(/refs\/heads\//, "", $2); print $2}')
        if [ -z "$DEFAULT_BRANCH" ]; then
          DEFAULT_BRANCH="master"  # 设置默认值
        fi
        echo "branch=${DEFAULT_BRANCH}" >> $GITHUB_OUTPUT

    - name: 克隆源代码
      run: |
        git clone "$REPO_URL" -b "${{ steps.get_branch.outputs.branch }}" openwrt --depth=1
        cd openwrt
        git fetch --unshallow  # 转换为完整仓库

    - name: 加载自定义源
      run: |
        [ -f "$DIY_P1_SH" ] || { echo "错误：缺少 $DIY_P1_SH"; exit 1; }
        chmod +x "$DIY_P1_SH"
        cd openwrt
        ../"$DIY_P1_SH"

    - name: 更新 Feeds
      run: |
        cd openwrt
        for i in {1..3}; do  # 添加重试机制
          ./scripts/feeds update -a && break || sleep 30
        done
        ./scripts/feeds install -a --force

    - name: 应用配置
      run: |
        cd openwrt
        [ -f "../$CONFIG_FILE" ] && cp "../$CONFIG_FILE" .config || \
        cp defconfig/mt7981-ax3000-gsw-usboffload.config .config
        [ -f "../$DIY_P2_SH}" ] || { echo "错误：缺少 $DIY_P2_SH"; exit 1; }
        chmod +x "../$DIY_P2_SH"
        ../"$DIY_P2_SH"
        make defconfig

    - name: 缓存优化
      uses: actions/cache@v4
      with:
        path: |
          openwrt/dl
          openwrt/ccache
        key: ${{ runner.os }}-${{ hashFiles('openwrt/feeds.conf.default', 'openwrt/.config', '**/Makefile') }}

    - name: 下载依赖
      run: |
        cd openwrt
        make -j$(nproc) download || make -j1 download
        # 移除可能损坏的文件
        find dl -size -1024c -name "*.zip" -exec rm -f {} \;

    - name: 编译固件
      run: |
        cd openwrt
        echo "开始编译..."
        make -j$(($(nproc)+1)) || make -j2 V=s  # 动态调整线程数

    - name: 整理固件
      run: |
        cd openwrt/bin/targets/*/*
        FIRMWARE_PATH=$(pwd)
        echo "FIRMWARE_PATH=${FIRMWARE_PATH}" >> $GITHUB_ENV
        # 创建版本信息
        echo "Built at: $(date +"%Y-%m-%d %H:%M:%S")" > build-info.txt
        echo "Git Revision: $(git rev-parse HEAD)" >> build-info.txt

    - name: 创建发布
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly-${{ steps.get_branch.outputs.branch }}-$(date +%Y%m%d)
        body_path: build-info.txt
        files: ${{ env.FIRMWARE_PATH }}/*
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 移除旧的删除步骤，改用官方清理方式
